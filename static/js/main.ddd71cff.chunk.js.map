{"version":3,"sources":["components/game/cells/matrix-cell/index.tsx","components/game/playground/index.tsx","components/game/cells/add-cell/index.tsx","components/game/cells/definition-cell/index.tsx","components/game/definition/index.tsx","components/game/index.tsx","models/solver.ts","App.tsx","index.tsx"],"names":["MatrixCellState","MatrixCell","state","Null","props","className","classNames","Filled","Empty","Playground","matrix","onChange","clickHandler","x","y","temp","map","m","slice","row","onClick","AddCell","DefinitionCell","type","Definition","definition","horizontal","changeHandler","e","def","Math","max","parseInt","target","value","blurHandler","splice","addHandler","cell","onBlur","Game","onDefChange","onPlaygroundChange","definitionChangeHandler","key","getSpaceSequences","spaces","Array","fill","_","i","arr","reduce","acc","term","concat","seq","getCellsSequences","totalSize","requiredCells","size","length","getRequiredCells","requiredSize","total","cells","spaceSize","solveRow","sequence","reference","refCell","every","alignSequenceCells","filter","filterInvalidSequences","getGameDefinition","width","undefined","height","getGameMatrix","App","useState","setSize","setDefinition","setMatrix","useEffect","inputChangeHandler","event","definitions","m1","col","r","setMatrixCol","getMatrixCol","setMatrixRow","getMatrixRow","solveStep","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ddd71cff.chunk.js","sourcesContent":["import classNames from \"classnames\";\nimport React, { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\nimport './index.css';\nexport enum MatrixCellState {\n    Filled,\n    Empty,\n    Null\n}\n\nexport type MatrixCellProps = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> & {\n    state?: MatrixCellState\n}\nexport const MatrixCell = ({ state = MatrixCellState.Null, ...props }: MatrixCellProps) => (\n    <button\n        {...props}\n        className={classNames({\n            'matrix-cell': true,\n            'matrix-cell-filled': state === MatrixCellState.Filled,\n            'matrix-cell-empty': state === MatrixCellState.Empty\n        })}\n    ></button>\n)\nexport default MatrixCell;","import React from \"react\";\nimport MatrixCell, { MatrixCellState } from \"../cells/matrix-cell\";\nimport './index.css';\nexport type GameMatrix = Array<Array<MatrixCellState>>;\nexport interface PlaygroundProps {\n    matrix: GameMatrix,\n    onChange?: (matrix: GameMatrix) => void\n}\nexport const Playground = ({ matrix, onChange = () => {} }: PlaygroundProps) => {\n    const clickHandler = (x: number, y: number) => () => {\n        const temp = matrix.map(m => m.slice());\n        temp[x][y] = ++temp[x][y] > MatrixCellState.Null ? MatrixCellState.Filled : temp[x][y]\n        onChange(temp);\n    }\n    return (\n        <div className=\"playground\">\n            {matrix.map((row, x) => (\n                <div className=\"playground-row\" key={'playground' + x}>\n                    {row.map((state, y) => <MatrixCell key={'playground' + y} state={state} onClick={clickHandler(x, y)} />)}\n                </div>\n            ))}\n        </div>\n    )\n};","import React, { ButtonHTMLAttributes, DetailedHTMLProps } from \"react\";\nimport \"./index.css\";\n\nexport const AddCell = (props: DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>) => <button className=\"add-cell\" {...props}><span></span></button>","import React, { InputHTMLAttributes } from \"react\";\nimport './index.css';\n\nexport const DefinitionCell = (props: InputHTMLAttributes<HTMLInputElement>) => <input className=\"definition-cell\" type=\"text\" {...props}/>\nexport default DefinitionCell;","import classNames from \"classnames\";\nimport React, { ChangeEvent, FocusEvent, Fragment } from \"react\";\nimport { AddCell } from \"../cells/add-cell\";\nimport DefinitionCell from \"../cells/definition-cell\";\nimport './index.css';\n\nexport type GameDefinitionSequence = Array<Array<number>>;\n\nexport interface DefinitionProps {\n    definition: GameDefinitionSequence,\n    horizontal?: boolean\n    onChange?: (definition: GameDefinitionSequence) => void\n}\nexport const Definition = ({ definition, horizontal = false, onChange = () => {}}: DefinitionProps) => {\n    const changeHandler = (x: number, y: number) => (e: ChangeEvent<HTMLInputElement>) => {\n        const def = [...definition];\n        def[x][y] = Math.max(0, parseInt(e.target.value) || 0);\n        onChange(def);\n    }\n    const blurHandler = (x: number, y: number) => (e: FocusEvent<HTMLInputElement>) => {\n        if (Math.max(0, parseInt(e.target.value) || 0) === 0) {\n            const def = [...definition];\n            def[x].splice(y, 1);\n            onChange(def);\n        }\n    }\n    const addHandler = (x: number, y :number) => () => {\n        const def = [...definition];\n        def[x].splice(y, 0, 1);\n        onChange(def);\n    }\n    return (\n        <div className={classNames({\n            'game-definition': true,\n            'game-definition-horizontal': horizontal,\n        })}>\n            {definition.map((row, x) => (\n                <div className=\"game-definition-row\" key={'row' + x}>\n                    <AddCell onClick={addHandler(x, 0)}/>\n                    {row.map((cell, y) => (\n                        <Fragment key={'cell' + y}>\n                            <DefinitionCell value={cell} onChange={changeHandler(x, y)} onBlur={blurHandler(x, y)}/>\n                            <AddCell onClick={addHandler(x, y + 1)}/>\n                        </Fragment>\n                    ))}\n                </div>\n            ))}\n        </div>\n    )\n}","import React from \"react\";\nimport { GameMatrix, Playground } from \"./playground\";\nimport { Definition, GameDefinitionSequence } from \"./definition\";\nimport './index.css';\n\nexport type GameDefinition = { x: GameDefinitionSequence, y: GameDefinitionSequence };\nexport interface GameProps {\n    definition: GameDefinition,\n    matrix: GameMatrix,\n    onDefChange?: (definition: GameDefinition) => void\n    onPlaygroundChange?: (matrix: GameMatrix) => void\n}\nconst Game = ({ definition, matrix, onDefChange = () => { }, onPlaygroundChange = () => {} }: GameProps) => {\n    const definitionChangeHandler = (key: keyof GameDefinition) => (def: GameDefinitionSequence) => onDefChange({\n        ...definition,\n        [key]: def\n    })\n    return (\n        <div className=\"game\">\n            <div className=\"game-row\">\n                <div className=\"game-col\"></div>\n                <div className=\"game-col\">\n                    <Definition definition={definition.x} onChange={definitionChangeHandler('x')} horizontal={true}/>\n                </div>\n            </div>\n            <div className=\"game-row\">\n                <div className=\"game-col\">\n                    <Definition definition={definition.y} onChange={definitionChangeHandler('y')}/>\n                </div>\n                <div className=\"game-col\">\n                    <Playground matrix={matrix} onChange={onPlaygroundChange}/>\n                </div>\n            </div>\n        </div>\n    );\n}\nexport default Game;","import { GameDefinition } from \"../components/game\";\nimport { MatrixCellState } from \"../components/game/cells/matrix-cell\";\nimport { GameDefinitionSequence } from \"../components/game/definition\";\nimport { GameMatrix } from \"../components/game/playground\";\n\nexport type DefinedMatrixCellState = MatrixCellState.Empty | MatrixCellState.Filled;\nexport const getMatrixRow = (matrix: GameMatrix, y: number) => matrix[y].slice()\nexport const setMatrixRow = (matrix: GameMatrix, row: GameMatrix[0], y: number) => {\n    const m = matrix.slice();\n    m[y] = row.slice();\n    return m;\n}\nexport const getMatrixCol = (matrix: GameMatrix, x: number) => matrix.map(row => row[x]);\nexport const setMatrixCol = (matrix: GameMatrix, col: GameMatrix[0], x: number) => matrix.map((row, y) => {\n    const r = row.slice();\n    r[x] = col[y];\n    return r;\n});\nexport const getSpaceSequences = (value: number, spaces: number): Array<Array<number>> => {\n    if (spaces <= 1) {\n        return [[value]]\n    }\n    const termNumbers = new Array(value + 1).fill(null).map((_, i, arr) => value - i);\n    return termNumbers.reduce<Array<Array<number>>>((acc, term) => \n        acc.concat(\n            getSpaceSequences(value - term, spaces - 1)\n                .map(seq => [term].concat(seq))\n        )\n    , [])\n}\n\nexport const getRequiredCells = (definition: GameDefinitionSequence[0]): Array<Array<DefinedMatrixCellState>> => {\n    return definition.map((size, i) =>\n        new Array(size).fill(null)\n            .map<DefinedMatrixCellState>(() => MatrixCellState.Filled)\n            .concat(i < definition.length - 1 ? [MatrixCellState.Empty] : [])\n    )\n}\n\nexport const getCellsSequences = (definition: GameDefinitionSequence[0], totalSize: number): Array<Array<DefinedMatrixCellState>> => {\n    //   1. get array of required cells\n    const requiredCells = getRequiredCells(definition);\n    const requiredSize = requiredCells.reduce((total, cells) => total + cells.length, 0);\n\n    //   2. get spaces sequences\n    const spacesSequences = getSpaceSequences(totalSize - requiredSize, requiredCells.length + 1);\n    //   3. map spaces with cells\n    return spacesSequences.map(spaces =>\n        spaces.reduce<Array<DefinedMatrixCellState>>((acc, spaceSize, i) =>\n            acc.concat(\n                new Array(spaceSize).fill(null)\n                    .map<DefinedMatrixCellState>(() => MatrixCellState.Empty)\n                    .concat(requiredCells[i] || [])\n            )\n        , [])\n    )\n}\n\nexport const filterInvalidSequences = (sequence: Array<Array<DefinedMatrixCellState>>, reference: GameMatrix[0]): Array<Array<DefinedMatrixCellState>> => {\n    return sequence.filter(cells => cells.every((cell, i) => (\n        reference[i] === MatrixCellState.Null || reference[i] === cell\n    )))\n}\n\nexport const alignSequenceCells = (sequence: Array<Array<DefinedMatrixCellState>>, reference: GameMatrix[0]): GameMatrix[0] => {\n    return reference.map((refCell, i) => {\n        if (refCell === MatrixCellState.Null && sequence.every((seq) => seq[i] === sequence[0][i])) {\n            return sequence[0][i];\n        }\n        return refCell\n    })\n}\n\nexport const solveRow = (row: GameMatrix[0], definition: GameDefinitionSequence[0]): GameMatrix[0] => {\n    // 1. generate cell sequences\n    const sequence = getCellsSequences(definition, row.length);\n    // 2. get rid of invalid sequences\n    const validSequence = filterInvalidSequences(sequence, row);\n    // 3. get aligned cells\n    return alignSequenceCells(validSequence, row)\n}\n\nexport const solveStep = (matrix: GameMatrix, definitions: GameDefinition): GameMatrix => {\n    const m1 = definitions.x.reduce((acc, def, i) => {\n        return setMatrixCol(acc, solveRow(getMatrixCol(acc, i), def), i);;\n    }, [...matrix])\n    const m2 = definitions.y.reduce((acc, def, i) => {\n        return setMatrixRow(acc, solveRow(getMatrixRow(acc, i), def), i);;\n    }, [...m1])\n    return m2;\n}","import React, { ChangeEvent, useEffect, useState } from \"react\";\nimport Game, { GameDefinition } from \"./components/game\";\nimport { MatrixCellState } from \"./components/game/cells/matrix-cell\";\nimport { GameMatrix } from \"./components/game/playground\";\nimport \"normalize.css\";\nimport { solveStep } from \"./models/solver\";\n\nexport type GameSize = {\n  width: number,\n  height: number\n}\nexport const getGameDefinition = (size: GameSize): GameDefinition => ({\n  x: new Array(size.width).fill(undefined).map(() => []),\n  y: new Array(size.height).fill(undefined).map(() => []),\n})\nexport const getGameMatrix = (size: GameSize): GameMatrix => new Array(size.height)\n  .fill(undefined)\n  .map(() => new Array(size.width)\n    .fill(undefined)\n    .map(() => MatrixCellState.Null)\n  );\nconst App = () => {\n  const [size, setSize] = useState<GameSize>({ width: 10, height: 10 });\n  const [definition, setDefinition] = useState<GameDefinition>(getGameDefinition(size));\n  const [matrix, setMatrix] = useState<GameMatrix>(getGameMatrix(size));\n  useEffect(() => {\n    setDefinition(getGameDefinition(size))\n    setMatrix(getGameMatrix(size))\n  }, [size]);\n  const inputChangeHandler = (key: keyof GameSize) => (event: ChangeEvent<HTMLInputElement>) => setSize({\n    ...size,\n    [key]: Math.max(1, parseInt(event.target.value) || 1)\n  });\n  const solveClickHandler = () => setMatrix(solveStep(matrix, definition));\n  return (\n    <>\n      <label>\n        Width<br />\n        <input type=\"number\" value={size.width} onChange={inputChangeHandler(\"width\")} />\n      </label>\n      <br />\n      <label>\n        Height<br />\n        <input type=\"number\" value={size.height} onChange={inputChangeHandler(\"height\")} />\n      </label>\n      <br />\n      <button onClick={solveClickHandler}>Solve</button>\n      <br/>\n      <Game definition={definition} matrix={matrix} onDefChange={setDefinition} onPlaygroundChange={setMatrix}/>\n    </>\n  )\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}